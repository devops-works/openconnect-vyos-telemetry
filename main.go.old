package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"

	"golang.org/x/crypto/ssh"
	"golang.org/x/crypto/ssh/terminal"
)

func main() {
	if len(os.Args) != 4 {
		log.Fatalf("Usage: %s <user> <host:port> <command>", os.Args[0])
	}

	client, session, err := connectToHost(os.Args[1], os.Args[2])
	if err != nil {
		panic(err)
	}
	out, err := session.CombinedOutput(os.Args[3])
	if err != nil {
		panic(err)
	}
	fmt.Println(string(out))
	client.Close()
}

func connectToHost(user, host string) (*ssh.Client, *ssh.Session, error) {
	var (
		pass      []byte
		sshConfig *ssh.ClientConfig
		signer    ssh.Signer
	)

	fmt.Print("Password: ")
	pass, err := terminal.ReadPassword(int(os.Stdin.Fd()))
	fmt.Println()

	if len(pass) == 0 {
		fmt.Print("Key Password: ")
		pass, err := terminal.ReadPassword(int(os.Stdin.Fd()))
		fmt.Println()

		key, err := ioutil.ReadFile("/home/leucos/.ssh/id_ed25519")
		if err != nil {
			log.Fatalf("unable to read private key: %v", err)
		}

		signer, err = ssh.ParsePrivateKeyWithPassphrase(key, pass)

		// Create the Signer for this private key.
		// signer, err := ssh.ParsePrivateKey([]byte("key"))
		if err != nil {
			log.Fatalf("unable to parse private key: %v", err)
		}

		log.Printf("signer type: %s", signer.PublicKey().Type())
		// log.Printf("signer key: %s", string(signer.PublicKey().Marshal()))

		sshConfig = &ssh.ClientConfig{
			User: user,
			Auth: []ssh.AuthMethod{
				// Use the PublicKeys method for remote authentication.
				ssh.PublicKeys(signer),
			},
			// HostKeyCallback: ssh.FixedHostKey(hostKey),
		}
	} else {
		sshConfig = &ssh.ClientConfig{
			User: user,
			Auth: []ssh.AuthMethod{ssh.Password(string(pass))},
		}
	}

	sshConfig.HostKeyCallback = ssh.InsecureIgnoreHostKey()

	client, err := ssh.Dial("tcp", host, sshConfig)
	if err != nil {
		log.Printf("unable to connect: %v", err)
		return nil, nil, err
	}

	fmt.Println("tcp connected")

	session, err := client.NewSession()
	if err != nil {
		log.Printf("unable to open session: %v", err)

		client.Close()
		return nil, nil, err
	}

	return client, session, nil
}
